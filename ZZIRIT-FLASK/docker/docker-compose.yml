version: '3.8'

services:
  zzirit-flask:
    build: .
    container_name: zzirit-flask-server
    ports:
      - "5100:5100"
    environment:
      - FLASK_ENV=production
      - PORT=5100
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      # 모델 및 데이터 영속성
      - ./CNN_model:/app/CNN_model
      - ./LLM_model:/app/LLM_model
      - ./model_all:/app/model_all
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - zzirit-network

  # 향후 확장용 (DB, Redis 등)
  # database:
  #   image: mysql:8.0
  #   container_name: zzirit-mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: rootpassword
  #     MYSQL_DATABASE: zzirit_db
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #   networks:
  #     - zzirit-network

networks:
  zzirit-network:
    driver: bridge

volumes:
  mysql_data:

## 6. setup.sh 수정 (권장)

```bash
#!/bin/bash

echo "🚀 ZZIRIT-FLASK 초기 설정 시작..."

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 로그 함수
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. 필요한 폴더 생성
log_info "필요한 폴더 생성 중..."
mkdir -p CNN_model LLM_model excel_data
mkdir -p data/{2022,2023,2024}
mkdir -p model_all logs
log_success "폴더 생성 완료"

# 2. 환경 변수 파일 확인/생성
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        log_info ".env 파일 생성 중..."
        cp .env.example .env
        log_warning ".env 파일을 열어 실제 API 키와 설정값을 입력해주세요!"
        log_warning "특히 GEMINI_API_KEY는 필수입니다."
    else
        log_error ".env.example 파일이 없습니다. 먼저 .env.example을 생성해주세요."
        exit 1
    fi
else
    log_success ".env 파일이 이미 존재합니다."
fi

# 3. Python 가상환경 확인
if [ ! -d ".venv" ]; then
    log_info "Python 가상환경 생성 중..."
    python3 -m venv .venv
    log_success "가상환경 생성 완료"
else
    log_success "가상환경이 이미 존재합니다."
fi

# 가상환경 활성화
log_info "가상환경 활성화 중..."
source .venv/bin/activate

# 4. 패키지 설치
log_info "Python 패키지 설치 중..."
pip install --upgrade pip
if pip install -r requirements.txt; then
    log_success "패키지 설치 완료"
else
    log_error "패키지 설치 실패"
    exit 1
fi

# 5. DB 연결 테스트
log_info "데이터베이스 연결 테스트 중..."
if python -c "
import sys
sys.path.append('.')
try:
    from services.db_handler import get_db_connection
    conn = get_db_connection()
    conn.close()
    print('✅ DB 연결 성공')
except Exception as e:
    print(f'❌ DB 연결 실패: {e}')
    sys.exit(1)
"; then
    log_success "데이터베이스 연결 성공"
else
    log_warning "데이터베이스 연결 실패 - 계속 진행하지만 DB 설정을 확인해주세요"
fi

# 6. Gemini API 테스트
log_info "Gemini API 연결 테스트 중..."
if python -c "
import sys
sys.path.append('.')
try:
    from gemini_handler import get_api_status
    status = get_api_status()
    if status.get('ready'):
        print('✅ Gemini API 연결 성공')
    else:
        print('❌ Gemini API 설정 필요')
        sys.exit(1)
except Exception as e:
    print(f'❌ Gemini API 테스트 실패: {e}')
    sys.exit(1)
"; then
    log_success "Gemini API 연결 성공"
else
    log_warning "Gemini API 연결 실패 - .env 파일의 GEMINI_API_KEY를 확인해주세요"
fi

# 7. 초기 데이터 생성 (선택적)
read -p "초기 학습 데이터를 생성하시겠습니까? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "초기 데이터 생성 중... (시간이 오래 걸릴 수 있습니다)"
    if python data3.py --years 2022,2023,2024; then
        log_success "초기 데이터 생성 완료"
    else
        log_warning "초기 데이터 생성 실패 - 나중에 수동으로 실행해주세요"
    fi
else
    log_info "초기 데이터 생성을 건너뜁니다"
fi

# 8. AI 모델 학습 (선택적)
read -p "AI 모델을 학습하시겠습니까? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "AI 모델 학습 중... (시간이 매우 오래 걸릴 수 있습니다)"
    if python ai-5-4.py --retrain --years 2023,2024; then
        log_success "AI 모델 학습 완료"
    else
        log_warning "AI 모델 학습 실패 - 나중에 수동으로 실행해주세요"
    fi
else
    log_info "AI 모델 학습을 건너뜁니다"
fi

# 9. 권한 설정
log_info "파일 권한 설정 중..."
chmod +x setup.sh 2>/dev/null || true
chmod +x entrypoint.sh 2>/dev/null || true

# 10. 설정 완료 메시지
echo
echo "================================================================="
log_success "ZZIRIT-FLASK 설정 완료!"
echo "================================================================="
echo
echo "🚀 서버 시작 방법:"
echo "   개발 모드: python app.py"
echo "   운영 모드: gunicorn -w 2 -k gthread --threads 4 -b 0.0.0.0:5100 app:app"
echo
echo "🐳 Docker 실행 방법:"
echo "   빌드: docker build -t zzirit-flask ."
echo "   실행: docker run -p 5100:5100 --env-file .env zzirit-flask"
echo "   Compose: docker-compose up -d"
echo
echo "📋 확인할 엔드포인트:"
echo "   메인: http://localhost:5100/"
echo "   헬스체크: http://localhost:5100/health"
echo "   메인 채팅: http://localhost:5100/api/chat"
echo "   AI 예측: http://localhost:5100/api/predict"
echo
log_warning "중요: .env 파일의 API 키들을 실제 값으로 설정해주세요!"
echo "================================================================="